package com.optimal.solutions.springsecuritydemo.configure;

import java.util.ArrayList;
import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

// only uncomment this when using WebSecurityConfigCustomUserDetailsService 
//@Service
public class MyUserDetailsService implements UserDetailsService
{

	// Specify the passwordEncoder as BCrypt, you can generate 
	 @Bean
	  public PasswordEncoder passwordEncoder() {
	    return new BCryptPasswordEncoder();
	  }
	 
	 
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException
	{
	
		// this can be a hardcoded list like this or come from a database
		// the passwords here are generated by https://bcrypt-generator.com/
		
		// paul's password is paul123
		// nancy's password is nancy123
		
		List<UserDetails> userDetailsList = new ArrayList<>();
		userDetailsList.add(User.withUsername("paul")
                .password("$2a$12$OtSVIMn/Li0gZg9/zmnUHeyGmEz/5mZyVhVuO8hlwa2pjLR3MURJG").roles("USER").build());
		userDetailsList.add(User.withUsername("nancy")
                .password("$2a$12$j6ah8zGF/u3BSN5ERbEVzeC5VFhLSCzJ8Eew73dVr8OkFGzQIgiWq").roles("MANAGER").build());
		
/*	// if you want to hardcode real password, then do not use the @Bean passwordEncoder above
  
		userDetailsList.add(User.withUsername("paul")
                .passwordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder()::encode)
                .password("paul123").roles("USER").build());	
		userDetailsList.add(User.withUsername("james")
                .passwordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder()::encode)
                .password("james123").roles("USER").build());	
		userDetailsList.add(User.withUsername("simon")
                .passwordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder()::encode)
                .password("simon123").roles("MANAGER").build());
		*/
		for (UserDetails u : userDetailsList)
		{
			if (u.getUsername().equals(username))
			{
				return u;
			}
		}
		

		throw new UsernameNotFoundException(username);
	}


}